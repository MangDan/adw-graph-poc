{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"Graph\",\n  data: function data() {\n    return {\n      container: null,\n      blitzboard: null,\n      config: null,\n      graph: null,\n      inputpg: \"SELECT * FROM MATCH (n1)-[e]-(n2) ON G_NH_STOCK LIMIT 20\",\n      dialog: false,\n      graphData: null,\n      graphItems: [{\n        text: \"종목\",\n        value: \"G_NH_STOCK\"\n      }, {\n        text: \"제품\",\n        value: \"G_NH_PRODUCT\"\n      }, {\n        text: \"인물\",\n        value: \"G_NH_PEOPLE\"\n      }, {\n        text: \"테마\",\n        value: \"G_NH_THEME\"\n      }, // by iron - 기관 회사 이벤트 추가\n      {\n        text: \"기관\",\n        value: \"G_NH_AGENT\"\n      }, {\n        text: \"회사\",\n        value: \"G_NH_COMPANY\"\n      }, {\n        text: \"이벤트\",\n        value: \"G_NH_EVENT\"\n      }],\n      // by iron -- breadcrumb 데이터 추가 시작\n      navItems: [{\n        text: '시작',\n        disabled: true,\n        href: ''\n      }],\n      // by iron -- breadcrumb 데이터 추가 끝\n      isNodeChange: false\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$EventBus.$on(\"nodeChange\", function (isNodeChange) {\n      _this.isNodeChange = isNodeChange;\n    });\n    this.$EventBus.$on(\"clearGraph\", function () {\n      _this.blitzboard.setGraph(''); // by iron -- breadcrumb 데이터 reset 시작 \n\n\n      _this.navItems = [{\n        text: '시작',\n        disabled: true,\n        href: ''\n      }]; // by iron -- breadcrumb 데이터 reset 끝\n    });\n    this.$EventBus.$on(\"initGraph\", function (config) {\n      _this.container = document.getElementById(\"blitzboard\");\n      _this.blitzboard = new Blitzboard(_this.container); // no-undef\n\n      _this.config = config; // pg를 통해서 그래프 생성\n\n      _this.blitzboard.setGraph(\"\", false);\n\n      _this.blitzboard.setConfig(_this.config);\n\n      _this.registerClickEventonGraph();\n    });\n    this.$EventBus.$on(\"querySubmit\", function (formData) {\n      console.log(formData);\n      _this.formData = formData;\n      var query = ''; // by iron -- breadcrumb 데이터 reset 시작 \n\n      _this.navItems = [{\n        text: '시작',\n        disabled: true,\n        href: ''\n      }]; // by iron -- breadcrumb 데이터 reset 끝\n      // Graph만\n      // by iron -- query 수정  ( 2022.6.6 18:33)   \n\n      if (_this.formData.searchTerm === '') {\n        query += \"SELECT * FROM MATCH (n1)-[e]-(n2) \";\n        query += \"ON \" + _this.formData.graph + \" \";\n      } else {\n        query += \"SELECT * FROM MATCH (n1)-[e]-(n2) \";\n        query += \"ON \" + _this.formData.graph + \" \"; // by iron  --  그래프에 따른 parameter 변경 추가\n\n        var param = 'v_name';\n\n        if (_this.formData.graph === 'G_NH_EVENT') {\n          param = 'EVENT_NAME';\n        } else if (_this.formData.graph === 'G_NH_COMPANY') {\n          param = 'CORP_NAME';\n        } else if (_this.formData.graph === 'G_NH_AGENT') {\n          param = 'AGENT_NAME';\n        }\n\n        query += \"WHERE JAVA_REGEXP_LIKE(n1.\" + param + \", '\" + _this.formData.searchTerm + \"') \";\n      }\n\n      if (_this.formData.limit !== '') {\n        query += \"LIMIT \" + _this.formData.limit;\n      }\n\n      console.log(query);\n\n      _this.$axios({\n        method: \"get\",\n        url: \"/ui/v1/query?pgql=\" + encodeURI(query),\n        // + \"&graph=\" + this.formData.graph,  -- by iron \n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        withCredentials: true,\n        cossDomain: true\n      }).then(function (response) {\n        var nodes = [];\n        var edges = [];\n        var result = response.data;\n        console.log(result.graph);\n        result.graph.vertices.forEach(function (elem) {\n          var node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          nodes.push(node);\n        });\n        result.graph.edges.forEach(function (elem) {\n          var edge = {\n            id: elem._id,\n            from: elem.s,\n            to: elem.d,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              edge.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          edges.push(edge);\n        });\n        _this.graphData = {\n          nodes: nodes,\n          edges: edges\n        };\n        console.log(_this.graphData);\n\n        _this.blitzboard.setGraph(_this.graphData, true);\n\n        _this.blitzboard.setConfig(_this.config); // by iron -- breadcrumb 데이터 푸쉬 시작 \n        // let firstNode = nodes.pop()\n        // var navText = ''\n        // switch (firstNode.labels[0]) {\n        //     case '기관':\n        //       navText = firstNode.properties.AGENT_NAME[0];\n        //       break;\n        //     case '이벤트':\n        //       navText = firstNode.properties.EVENT_NAME[0];\n        //       break;\n        //     case '회사':\n        //       navText = firstNode.properties.CORP_NAME[0];\n        //       break;\n        //     default:\n        //       navText = firstNode.properties.V_NAME[0];\n        //       break;\n        //   }\n\n\n        var navText = _this.formData.searchTerm;\n\n        if (navText === '') {\n          navText == \"*\";\n        }\n\n        _this.navItems.push({\n          text: navText,\n          disabled: false,\n          href: ''\n        }); // by iron -- breadcrumb 데이터 푸쉬 끝\n\n\n        _this.registerClickEventonGraph();\n      });\n    });\n    this.$EventBus.$on(\"updateGraph\", function (config) {\n      _this.container = document.getElementById(\"blitzboard\");\n      _this.config = config; // pg를 통해서 그래프 생성\n\n      _this.blitzboard.setGraph(_this.graph, false);\n\n      _this.blitzboard.setConfig(_this.config);\n\n      _this.registerClickEventonGraph();\n    });\n  },\n  mounted: function mounted() {},\n  methods: {\n    registerClickEventonGraph: function registerClickEventonGraph() {\n      var _this2 = this;\n\n      // 더블클릭 시 해당 노드를 기준으로 쿼리\n      this.blitzboard.network.on(\"doubleClick\", function (e) {\n        if (e.nodes.length > 0) {\n          var node = _this2.blitzboard.nodeMap[e.nodes[0]];\n\n          _this2.blitzboard.scrollNodeIntoView(node); // 해당 노드를 하이라이트하여 중앙으로 이동시킴\n\n\n          _this2.queryByNodeId(node);\n\n          var navText = ''; // by iron - breadcrumbs 아이템 추가  시작\n\n          switch (node.labels[0]) {\n            case '기관':\n              navText = node.properties.AGENT_NAME[0];\n              break;\n\n            case '이벤트':\n              navText = node.properties.EVENT_NAME[0];\n              break;\n\n            case '회사':\n              navText = node.properties.CORP_NAME[0];\n              break;\n\n            default:\n              navText = node.properties.V_NAME[0];\n              break;\n          }\n\n          _this2.navItems.push({\n            text: navText,\n            disabled: true,\n            href: ''\n          }); // by iron - breadcrumbs 아이템 추가  끝\n\n        }\n      }); // 클릭 시 속성값 가져오기\n\n      this.blitzboard.network.on(\"click\", function (e) {\n        if (e.nodes.length > 0) {\n          var node = _this2.blitzboard.nodeMap[e.nodes[0]];\n\n          _this2.$EventBus.$emit(\"nodeClicked\", node);\n        } // if (e.edges.length > 0) {\n        //   let edge = this.blitzboard.edgeMap[e.edges[0]];\n        //   //console.log(edge);\n        // }\n\n      });\n    },\n    queryByNodeId: function queryByNodeId(node) {\n      var _this3 = this;\n\n      var graph = this.graphItems.filter(function (it) {\n        return it.text.includes(node.labels[0]);\n      });\n      var query = '';\n      query += 'SELECT * FROM MATCH (n1)-[e]-(n2) ';\n      query += \"ON \" + graph[0].value + \" \";\n      query += 'WHERE ID(n1) = \\'' + node.id + '\\' ';\n\n      if (this.formData.limit !== '') {\n        query += \"LIMIT \" + this.formData.limit;\n      } //console.log(query);\n\n\n      this.blitzboard.showLoader();\n      this.$axios({\n        method: \"get\",\n        url: \"/ui/v1/query?pgql=\" + encodeURI(query),\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        withCredentials: true,\n        cossDomain: true\n      }).then(function (response) {\n        var nodes = [];\n        var edges = [];\n        var result = response.data; // Nodes\n\n        result.graph.vertices.forEach(function (elem) {\n          var node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          console.log(node); // ReDraw\n\n          if (_this3.isNodeChange) {\n            nodes.push(node);\n          } else {\n            // Add\n            _this3.blitzboard.addNode(node, false);\n          }\n        }); // Edges\n\n        result.graph.edges.forEach(function (elem) {\n          // 여러번 클릭한 경우 동일한 엣지가 계속 생성되는 걸 방지...\n          if (!_this3.blitzboard.hasEdge(elem.s, elem.d)) {\n            var edge = {\n              id: elem._id,\n              from: elem.s,\n              to: elem.d,\n              labels: elem.l,\n              properties: {}\n            };\n            elem.p.forEach(function (elem_p) {\n              if (elem_p.v) {\n                edge.properties[elem_p.n] = [elem_p.v]; //edge.properties['weight'] = '5.77876';\n              }\n            }); // ReDraw\n\n            if (_this3.isNodeChange) {\n              edges.push(edge);\n            } else {\n              // Add\n              _this3.blitzboard.addEdge(edge, false);\n            }\n          }\n        }); // Update\n\n        if (_this3.isNodeChange) {\n          _this3.graphData = {\n            nodes: nodes,\n            edges: edges\n          };\n\n          _this3.blitzboard.setGraph(_this3.graphData, true);\n\n          _this3.blitzboard.setConfig(_this3.config);\n        } else {\n          _this3.blitzboard.update();\n        }\n\n        _this3.registerClickEventonGraph();\n\n        _this3.blitzboard.hideLoader();\n      });\n    },\n    // by iron  \n    // redraw() query 를 받아서 그래프 구성  \n    // 기존 JSON 구조에서 Query 던지는 것으로 바꿈\n    redraw: function redraw() {\n      var _this4 = this;\n\n      //this.graph = this.inputpg;\n      var query = this.inputpg;\n      this.$axios({\n        method: \"get\",\n        url: \"/ui/v1/query?pgql=\" + encodeURI(query),\n        // + \"&graph=\" + this.formData.graph, \n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        withCredentials: true,\n        cossDomain: true\n      }).then(function (response) {\n        var nodes = [];\n        var edges = [];\n        var result = response.data;\n        result.graph.vertices.forEach(function (elem) {\n          var node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          nodes.push(node);\n        });\n        result.graph.edges.forEach(function (elem) {\n          var edge = {\n            id: elem._id,\n            from: elem.s,\n            to: elem.d,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              edge.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          edges.push(edge);\n        });\n        _this4.graphData = {\n          nodes: nodes,\n          edges: edges\n        };\n        console.log(_this4.graphData);\n\n        _this4.blitzboard.setGraph('');\n\n        _this4.blitzboard.setGraph(_this4.graphData, true);\n\n        _this4.blitzboard.setConfig(_this4.config);\n\n        _this4.registerClickEventonGraph();\n\n        _this4.dialog = !_this4.dialog;\n      });\n    },\n    reConfig: function reConfig() {\n      this.config = {\n        node: {\n          caption: [\"id\"],\n          defaultIcon: false,\n          icon: {\n            person: \"akar-icons:person\",\n            Property: \"f38f\",\n            Tax: \"f119\",\n            Account: \"f119\",\n            Income: \"f316\"\n          },\n          shape: {\n            person: \"triangle\",\n            graph: \"square\"\n          },\n          size: {\n            person: 10\n          }\n        },\n        edge: {\n          caption: [\"label\"],\n          color: {\n            say1: \"green\"\n          }\n        }\n      }; // pg를 통해서 그래프 생성\n\n      this.blitzboard.setGraph(this.graph, false);\n      this.blitzboard.setConfig(this.config);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgEA;EACAA,aADA;EAGAC;IAAA;MACAC,eADA;MAEAC,gBAFA;MAGAC,YAHA;MAIAC,WAJA;MAKAC,mEALA;MAMAC,aANA;MAOAC,eAPA;MAQAC,aACA;QAAAC;QAAAC;MAAA,CADA,EAEA;QAAAD;QAAAC;MAAA,CAFA,EAGA;QAAAD;QAAAC;MAAA,CAHA,EAIA;QAAAD;QAAAC;MAAA,CAJA,EAKA;MACA;QAAAD;QAAAC;MAAA,CANA,EAOA;QAAAD;QAAAC;MAAA,CAPA,EAQA;QAAAD;QAAAC;MAAA,CARA,CARA;MAkBA;MACAC,WACA;QACAF,UADA;QAEAG,cAFA;QAGAC;MAHA,CADA,CAnBA;MA0BA;MACAC;IA3BA;EAAA,CAHA;EAgCAC,OAhCA,qBAgCA;IAAA;;IACA;MACA;IACA,CAFA;IAIA;MACA,8BADA,CAEA;;;MACA;QAAAN;QAAAG;QAAAC;MAAA,GAHA,CAIA;IACA,CALA;IAOA;MACA;MACA,mDAFA,CAEA;;MACA,sBAHA,CAKA;;MACA;;MACA;;MAEA;IAEA,CAXA;IAaA;MACAG;MACA;MACA,eAHA,CAKA;;MACA;QAAAP;QAAAG;QAAAC;MAAA,GANA,CAOA;MAEA;MACA;;MAEA;QACAI;QACAA;MACA,CAHA,MAGA;QACAA;QACAA,4CAFA,CAIA;;QACA;;QACA;UACAC;QACA,CAFA,MAEA;UACAA;QACA,CAFA,MAEA;UACAA;QACA;;QACAD;MACA;;MACA;QACAA;MACA;;MACAD;;MAEA;QACAG,aADA;QAEAC,KACA,uCAHA;QAGA;QACAC;UAAA;QAAA,CAJA;QAKAC,qBALA;QAMAC;MANA,GAOAC,IAPA,CAOA;QACA;QACA;QACA;QACAR;QACAS;UACA;YACAC,YADA;YAEAC,cAFA;YAGAC;UAHA;UAKAC;YACA;cACAC;YACA;UACA,CAJA;UAKAC;QACA,CAZA;QAcAN;UACA;YACAC,YADA;YAEAM,YAFA;YAGAC,UAHA;YAIAN,cAJA;YAKAC;UALA;UAOAC;YACA;cACAK;YACA;UACA,CAJA;UAMAC;QACA,CAfA;QAiBA;UAAAJ;UAAAI;QAAA;QACAnB;;QACA;;QACA,yCAvCA,CAwCA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;QACA;;;QACA;;QACA;UACAoB;QACA;;QACA,oBACA;UACA3B,aADA;UAEAG,eAFA;UAGAC;QAHA,CADA,EA7DA,CAqEA;;;QACA;MACA,CA9EA;IA+EA,CAlHA;IAoHA;MACA;MACA,sBAFA,CAIA;;MACA;;MACA;;MAEA;IACA,CATA;EAUA,CAvLA;EAwLAwB,OAxLA,qBAwLA,CACA,CAzLA;EA0LAC;IACAC,yBADA,uCACA;MAAA;;MACA;MACA;QACA;UACA;;UAEA,2CAHA,CAGA;;;UAEA;;UAEA,iBAPA,CAQA;;UACA;YACA;cACAH;cACA;;YACA;cACAA;cACA;;YACA;cACAA;cACA;;YACA;cACAA;cACA;UAZA;;UAeA,qBACA;YACA3B,aADA;YAEAG,cAFA;YAGAC;UAHA,CADA,EAxBA,CA+BA;;QAGA;MACA,CApCA,EAFA,CAwCA;;MACA;QACA;UACA;;UACA;QACA,CAJA,CAMA;QACA;QACA;QACA;;MACA,CAVA;IAWA,CArDA;IAsDA2B,aAtDA,yBAsDAV,IAtDA,EAsDA;MAAA;;MACA;QAAA;MAAA;MAEA;MACAb;MACAA;MACAA;;MAEA;QACAA;MACA,CAVA,CAYA;;;MAEA;MAEA;QACAE,aADA;QAEAC,KACA,uCAHA;QAIAC;UAAA;QAAA,CAJA;QAKAC,qBALA;QAMAC;MANA,GAOAC,IAPA,CAOA;QACA;QACA;QAEA,2BAJA,CAKA;;QACAC;UACA;YACAC,YADA;YAEAC,cAFA;YAGAC;UAHA;UAKAC;YACA;cACAC;YACA;UACA,CAJA;UAKAd,kBAXA,CAYA;;UACA;YACAe;UACA,CAFA,MAEA;YAAA;YACA;UACA;QACA,CAlBA,EANA,CA0BA;;QACAN;UAEA;UACA;YACA;cACAC,YADA;cAEAM,YAFA;cAGAC,UAHA;cAIAN,cAJA;cAKAC;YALA;YAOAC;cACA;gBACAK,uCADA,CAEA;cACA;YACA,CALA,EARA,CAeA;;YACA;cACAC;YACA,CAFA,MAEA;cAAA;cACA;YACA;UACA;QACA,CAzBA,EA3BA,CAqDA;;QACA;UACA;YAAAJ;YAAAI;UAAA;;UACA;;UACA;QACA,CAJA,MAIA;UACA;QACA;;QACA;;QACA;MACA,CAtEA;IAuEA,CA7IA;IA+IA;IACA;IACA;IACAM,MAlJA,oBAkJA;MAAA;;MAEA;MACA;MAEA;QACAtB,aADA;QAEAC,KACA,uCAHA;QAGA;QACAC;UAAA;QAAA,CAJA;QAKAC,qBALA;QAMAC;MANA,GAOAC,IAPA,CAOA;QACA;QACA;QACA;QAEAC;UACA;YACAC,YADA;YAEAC,cAFA;YAGAC;UAHA;UAKAC;YACA;cACAC;YACA;UACA,CAJA;UAKAC;QACA,CAZA;QAcAN;UACA;YACAC,YADA;YAEAM,YAFA;YAGAC,UAHA;YAIAN,cAJA;YAKAC;UALA;UAOAC;YACA;cACAK;YACA;UACA,CAJA;UAMAC;QACA,CAfA;QAiBA;UAAAJ;UAAAI;QAAA;QACAnB;;QACA;;QACA;;QACA;;QACA;;QACA;MAEA,CAnDA;IAsDA,CA7MA;IA8MA0B,QA9MA,sBA8MA;MACA;QACAZ;UACAa,eADA;UAEAC,kBAFA;UAGAC;YACAC,2BADA;YAEAC,gBAFA;YAGAC,WAHA;YAIAC,eAJA;YAKAC;UALA,CAHA;UAUAC;YACAL,kBADA;YAEA1C;UAFA,CAVA;UAcAgD;YACAN;UADA;QAdA,CADA;QAmBAZ;UACAS,kBADA;UAEAU;YACAC;UADA;QAFA;MAnBA,EADA,CA4BA;;MACA;MACA;IACA;EA7OA;AA1LA","names":["name","data","container","blitzboard","config","graph","inputpg","dialog","graphData","graphItems","text","value","navItems","disabled","href","isNodeChange","created","console","query","param","method","url","headers","withCredentials","cossDomain","then","result","id","labels","properties","elem","node","nodes","from","to","edge","edges","navText","mounted","methods","registerClickEventonGraph","queryByNodeId","redraw","reConfig","caption","defaultIcon","icon","person","Property","Tax","Account","Income","shape","size","color","say1"],"sourceRoot":"src/views","sources":["Graph.vue"],"sourcesContent":["<template>\n  <v-main class=\"grey lighten-3\">\n    <v-container fluid>\n      <v-row>\n        <v-col class=\"pt-0 mt-0\">\n          <v-sheet min-height=\"78vh\" rounded=\"lg\">\n            <div style=\"height: 78vh; width: 98%\" id=\"blitzboard\"></div>\n            <!-- by iron v-breadcrums 추가  시작 -->\n            <!--v-breadcrumbs :items=\"navItems\" divider=\"-\"></v-breadcrumbs-->\n            <v-breadcrumbs :items=\"navItems\">\n              <template v-slot:divider>\n                <v-icon>mdi-forward</v-icon>\n              </template>\n            </v-breadcrumbs>\n            <!-- by iron v-breadcrums 추가  끝 -->\n            <v-btn\n              @click=\"dialog = !dialog\"\n              color=\"#c83b29\"\n              absolute\n              fab\n              large\n              dark\n              bottom\n              right\n            >\n              <v-icon>mdi-chevron-up</v-icon>\n            </v-btn>\n          </v-sheet>\n        </v-col>\n      </v-row>\n\n      <v-dialog v-model=\"dialog\" persistent max-width=\"500px\">\n        <v-card>\n          <v-card-title>\n            <!-- by iron 타이틀 변경 시작 -->\n            <span class=\"text-h5\">PG Query 직접 입력</span>\n            <!-- by iron 타이틀 변경  끝-->\n          </v-card-title>\n          <v-card-text class=\"pa-0\">\n            <v-container fluid class=\"pa-2\">\n              <v-textarea\n                outlined\n                name=\"input-pg\"\n                label=\"PG Query\"\n                v-model=\"inputpg\"\n                counter=\"6\"\n              >\n              </v-textarea>\n            </v-container>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"blue darken-1\" text @click=\"redraw\"> Submit </v-btn>\n            <v-btn color=\"blue darken-1\" text @click=\"dialog = false\">\n              Cancel\n            </v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-main>\n</template>\n\n<script>\nexport default {\n  name: \"Graph\",\n\n  data: () => ({\n    container: null,\n    blitzboard: null,\n    config: null,\n    graph: null,\n    inputpg: \"SELECT * FROM MATCH (n1)-[e]-(n2) ON G_NH_STOCK LIMIT 20\",\n    dialog: false,\n    graphData: null,\n    graphItems: [\n      { text: \"종목\", value: \"G_NH_STOCK\" },\n      { text: \"제품\", value: \"G_NH_PRODUCT\" },\n      { text: \"인물\", value: \"G_NH_PEOPLE\" },\n      { text: \"테마\", value: \"G_NH_THEME\" },\n      // by iron - 기관 회사 이벤트 추가\n      { text: \"기관\", value: \"G_NH_AGENT\" },\n      { text: \"회사\", value: \"G_NH_COMPANY\" },\n      { text: \"이벤트\", value: \"G_NH_EVENT\" },\n    ],\n    // by iron -- breadcrumb 데이터 추가 시작\n    navItems: [\n      {\n        text: '시작',\n        disabled: true,\n        href: '',\n      },\n    ],\n    // by iron -- breadcrumb 데이터 추가 끝\n    isNodeChange: false\n  }),\n  created() {\n    this.$EventBus.$on(\"nodeChange\", (isNodeChange) => {\n      this.isNodeChange = isNodeChange;\n    });\n\n    this.$EventBus.$on(\"clearGraph\", () => {\n      this.blitzboard.setGraph('');\n      // by iron -- breadcrumb 데이터 reset 시작 \n      this.navItems = [{ text: '시작', disabled: true, href: '' }]\n      // by iron -- breadcrumb 데이터 reset 끝\n    });\n\n    this.$EventBus.$on(\"initGraph\", (config) => {\n      this.container = document.getElementById(\"blitzboard\");\n      this.blitzboard = new Blitzboard(this.container); // no-undef\n      this.config = config;\n\n      // pg를 통해서 그래프 생성\n      this.blitzboard.setGraph(\"\", false);\n      this.blitzboard.setConfig(this.config);\n\n      this.registerClickEventonGraph();\n\n    });\n\n    this.$EventBus.$on(\"querySubmit\", (formData) => {\n      console.log(formData);\n      this.formData = formData;\n      let query = '';\n\n      // by iron -- breadcrumb 데이터 reset 시작 \n      this.navItems = [{ text: '시작', disabled: true, href: '' }]\n      // by iron -- breadcrumb 데이터 reset 끝\n\n      // Graph만\n      // by iron -- query 수정  ( 2022.6.6 18:33)   \n\n      if (this.formData.searchTerm === '') {\n        query += \"SELECT * FROM MATCH (n1)-[e]-(n2) \";\n        query += \"ON \" + this.formData.graph + \" \";\n      } else {\n        query += \"SELECT * FROM MATCH (n1)-[e]-(n2) \";\n        query += \"ON \" + this.formData.graph + \" \";\n\n        // by iron  --  그래프에 따른 parameter 변경 추가\n        let param = 'v_name';\n        if (this.formData.graph === 'G_NH_EVENT') {\n          param = 'EVENT_NAME';\n        } else if (this.formData.graph === 'G_NH_COMPANY') {\n          param = 'CORP_NAME';\n        } else if (this.formData.graph === 'G_NH_AGENT') {\n          param = 'AGENT_NAME'\n        }\n        query += \"WHERE JAVA_REGEXP_LIKE(n1.\" + param + \", '\" + this.formData.searchTerm + \"') \"\n      }\n      if (this.formData.limit !== '') {\n        query += \"LIMIT \" + this.formData.limit;\n      }\n      console.log(query);\n\n      this.$axios({\n        method: \"get\",\n        url:\n          \"/ui/v1/query?pgql=\" + encodeURI(query),  // + \"&graph=\" + this.formData.graph,  -- by iron \n        headers: { \"Content-type\": \"application/json\" },\n        withCredentials: true,\n        cossDomain: true,\n      }).then((response) => {\n        var nodes = [];\n        var edges = [];\n        let result = response.data;\n        console.log(result.graph)\n        result.graph.vertices.forEach((elem) => {\n          let node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {},\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          nodes.push(node);\n        });\n\n        result.graph.edges.forEach((elem) => {\n          let edge = {\n            id: elem._id,\n            from: elem.s,\n            to: elem.d,\n            labels: elem.l,\n            properties: {},\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              edge.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n\n          edges.push(edge);\n        });\n\n        this.graphData = { nodes: nodes, edges: edges };\n        console.log(this.graphData);\n        this.blitzboard.setGraph(this.graphData, true);\n        this.blitzboard.setConfig(this.config);\n    // by iron -- breadcrumb 데이터 푸쉬 시작 \n        // let firstNode = nodes.pop()\n        // var navText = ''\n        // switch (firstNode.labels[0]) {\n        //     case '기관':\n        //       navText = firstNode.properties.AGENT_NAME[0];\n        //       break;\n        //     case '이벤트':\n        //       navText = firstNode.properties.EVENT_NAME[0];\n        //       break;\n        //     case '회사':\n        //       navText = firstNode.properties.CORP_NAME[0];\n        //       break;\n        //     default:\n        //       navText = firstNode.properties.V_NAME[0];\n        //       break;\n        //   }\n        var navText = this.formData.searchTerm ;\n        if (navText === '')  {\n          navText == \"*\"\n        }\n          this.navItems.push(\n            {\n              text: navText,\n              disabled: false ,\n              href: '',\n            }\n          )\n      \n      // by iron -- breadcrumb 데이터 푸쉬 끝\n        this.registerClickEventonGraph();\n      });\n    });\n\n    this.$EventBus.$on(\"updateGraph\", (config) => {\n      this.container = document.getElementById(\"blitzboard\");\n      this.config = config;\n\n      // pg를 통해서 그래프 생성\n      this.blitzboard.setGraph(this.graph, false);\n      this.blitzboard.setConfig(this.config);\n\n      this.registerClickEventonGraph();\n    });\n  },\n  mounted() {\n  },\n  methods: {\n    registerClickEventonGraph() {\n      // 더블클릭 시 해당 노드를 기준으로 쿼리\n      this.blitzboard.network.on(\"doubleClick\", (e) => {\n        if (e.nodes.length > 0) {\n          let node = this.blitzboard.nodeMap[e.nodes[0]];\n\n          this.blitzboard.scrollNodeIntoView(node); // 해당 노드를 하이라이트하여 중앙으로 이동시킴\n\n          this.queryByNodeId(node);\n\n          var navText = ''\n          // by iron - breadcrumbs 아이템 추가  시작\n          switch (node.labels[0]) {\n            case '기관':\n              navText = node.properties.AGENT_NAME[0];\n              break;\n            case '이벤트':\n              navText = node.properties.EVENT_NAME[0];\n              break;\n            case '회사':\n              navText = node.properties.CORP_NAME[0];\n              break;\n            default:\n              navText = node.properties.V_NAME[0];\n              break;\n          }\n\n          this.navItems.push(\n            {\n              text: navText,\n              disabled: true,\n              href: '',\n            }\n          )\n          // by iron - breadcrumbs 아이템 추가  끝\n\n\n        }\n      });\n\n      // 클릭 시 속성값 가져오기\n      this.blitzboard.network.on(\"click\", (e) => {\n        if (e.nodes.length > 0) {\n          let node = this.blitzboard.nodeMap[e.nodes[0]];\n          this.$EventBus.$emit(\"nodeClicked\", node);\n        }\n\n        // if (e.edges.length > 0) {\n        //   let edge = this.blitzboard.edgeMap[e.edges[0]];\n        //   //console.log(edge);\n        // }\n      });\n    },\n    queryByNodeId(node) {\n      let graph = this.graphItems.filter(it => it.text.includes(node.labels[0]));\n\n      let query = ''\n      query += 'SELECT * FROM MATCH (n1)-[e]-(n2) ';\n      query += \"ON \" + graph[0].value + \" \";\n      query += 'WHERE ID(n1) = \\'' + node.id + '\\' ';\n\n      if (this.formData.limit !== '') {\n        query += \"LIMIT \" + this.formData.limit;\n      }\n\n      //console.log(query);\n\n      this.blitzboard.showLoader();\n\n      this.$axios({\n        method: \"get\",\n        url:\n          \"/ui/v1/query?pgql=\" + encodeURI(query),\n        headers: { \"Content-type\": \"application/json\" },\n        withCredentials: true,\n        cossDomain: true,\n      }).then((response) => {\n        var nodes = [];\n        var edges = [];\n\n        let result = response.data;\n        // Nodes\n        result.graph.vertices.forEach((elem) => {\n          let node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          console.log(node);\n          // ReDraw\n          if(this.isNodeChange) {\n            nodes.push(node);\n          } else {  // Add\n            this.blitzboard.addNode(node, false);\n          }\n        });\n\n        // Edges\n        result.graph.edges.forEach((elem) => {\n\n          // 여러번 클릭한 경우 동일한 엣지가 계속 생성되는 걸 방지...\n          if(!this.blitzboard.hasEdge(elem.s, elem.d)) {\n            let edge = {\n              id: elem._id,\n              from: elem.s,\n              to: elem.d,\n              labels: elem.l,\n              properties: {}\n            };\n            elem.p.forEach((elem_p) => {\n              if (elem_p.v) {\n                edge.properties[elem_p.n] = [elem_p.v];\n                //edge.properties['weight'] = '5.77876';\n              }\n            });\n\n            // ReDraw\n            if(this.isNodeChange) {\n              edges.push(edge);\n            } else {  // Add\n              this.blitzboard.addEdge(edge, false);\n            }\n          }\n        });\n        // Update\n        if(this.isNodeChange) {\n          this.graphData = { nodes: nodes, edges: edges };\n          this.blitzboard.setGraph(this.graphData, true);\n          this.blitzboard.setConfig(this.config);\n        } else {\n          this.blitzboard.update();\n        }\n        this.registerClickEventonGraph();\n        this.blitzboard.hideLoader();\n      });\n    },\n\n    // by iron  \n    // redraw() query 를 받아서 그래프 구성  \n    // 기존 JSON 구조에서 Query 던지는 것으로 바꿈\n    redraw() {\n\n      //this.graph = this.inputpg;\n      let query = this.inputpg;\n\n      this.$axios({\n        method: \"get\",\n        url:\n          \"/ui/v1/query?pgql=\" + encodeURI(query),  // + \"&graph=\" + this.formData.graph, \n        headers: { \"Content-type\": \"application/json\" },\n        withCredentials: true,\n        cossDomain: true,\n      }).then((response) => {\n        var nodes = [];\n        var edges = [];\n        let result = response.data;\n\n        result.graph.vertices.forEach((elem) => {\n          let node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {},\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          nodes.push(node);\n        });\n\n        result.graph.edges.forEach((elem) => {\n          let edge = {\n            id: elem._id,\n            from: elem.s,\n            to: elem.d,\n            labels: elem.l,\n            properties: {},\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              edge.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n\n          edges.push(edge);\n        });\n\n        this.graphData = { nodes: nodes, edges: edges };\n        console.log(this.graphData);\n        this.blitzboard.setGraph('')\n        this.blitzboard.setGraph(this.graphData, true);\n        this.blitzboard.setConfig(this.config);\n        this.registerClickEventonGraph();\n        this.dialog = !this.dialog;\n\n      });\n\n\n    },\n    reConfig() {\n      this.config = {\n        node: {\n          caption: [\"id\"],\n          defaultIcon: false,\n          icon: {\n            person: \"akar-icons:person\",\n            Property: \"f38f\",\n            Tax: \"f119\",\n            Account: \"f119\",\n            Income: \"f316\",\n          },\n          shape: {\n            person: \"triangle\",\n            graph: \"square\",\n          },\n          size: {\n            person: 10,\n          },\n        },\n        edge: {\n          caption: [\"label\"],\n          color: {\n            say1: \"green\",\n          },\n        },\n      };\n\n      // pg를 통해서 그래프 생성\n      this.blitzboard.setGraph(this.graph, false);\n      this.blitzboard.setConfig(this.config);\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}