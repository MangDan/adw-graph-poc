{"ast":null,"code":"//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"Graph\",\n  data: function data() {\n    return {\n      container: null,\n      blitzboard: null,\n      config: null,\n      graph: null,\n      inputpg: \"\",\n      dialog: false\n    };\n  },\n  created: function created() {\n    this.$EventBus.$on(\"querySubmit\", function (formData) {\n      console.log(formData.input1); // TODO: Parameter로 받아서 PGQL을 생성하고 Graph Server로 쿼리를 전달\n    });\n  },\n  mounted: function mounted() {\n    this.container = document.getElementById(\"blitzboard\");\n    this.blitzboard = new Blitzboard(this.container); // no-undef\n\n    this.config = {\n      node: {\n        caption: [\"name\"],\n        defaultIcon: false,\n        icon: {\n          'Person': \"akar-icons:person\",\n          Property: \"f38f\",\n          Tax: \"f119\",\n          Account: \"f119\",\n          Income: \"f316\"\n        },\n        color: {\n          'Person': 'blue'\n        }\n      },\n      edge: {\n        caption: [\"label\"]\n      }\n    }; // pg를 통해서 그래프 생성\n\n    this.blitzboard.setGraph(this.graph, false);\n    this.blitzboard.setConfig(this.config);\n  },\n  methods: {\n    redraw: function redraw() {\n      var _this = this;\n\n      // if(this.graph != null) {\n      //   console.log(\"not null\");\n      //   this.graph = null;\n      // }\n      // sample #1\n      this.graph = this.inputpg;\n      this.blitzboard.setGraph(this.graph, true); //this.blitzboard.setConfig(this.config);\n      // 한번 클릭 시 해당 노드를 기준으로 쿼리\n\n      this.blitzboard.network.on(\"click\", function (e) {\n        if (e.nodes.length > 0) {\n          var node = _this.blitzboard.nodeMap[e.nodes[0]];\n\n          _this.blitzboard.scrollNodeIntoView(node); // 해당 노드를 하이라이트하여 중앙으로 이동시킴\n\n        }\n      }); // 더블 클릭 시 속성값 가져오기\n\n      this.blitzboard.network.on(\"doubleClick\", function (e) {\n        //console.log(blitzboard.config);\n        if (e.nodes.length > 0) {\n          var node = _this.blitzboard.nodeMap[e.nodes[0]]; //console.log(node);\n        }\n\n        if (e.edges.length > 0) {\n          var edge = _this.blitzboard.edgeMap[e.edges[0]]; //console.log(edge);\n        }\n      });\n      this.dialog = !this.dialog;\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuDA;EACAA,aADA;EAGAC;IAAA;MACAC,eADA;MAEAC,gBAFA;MAGAC,YAHA;MAIAC,WAJA;MAKAC,WALA;MAMAC;IANA;EAAA,CAHA;EAWAC,OAXA,qBAWA;IACA;MACAC,6BADA,CAGA;IACA,CAJA;EAKA,CAjBA;EAkBAC,OAlBA,qBAkBA;IACA;IACA,iDAFA,CAEA;;IAEA;MACAC;QACAC,iBADA;QAEAC,kBAFA;QAGAC;UACA,6BADA;UAEAC,gBAFA;UAGAC,WAHA;UAIAC,eAJA;UAKAC;QALA,CAHA;QAUAC;UACA;QADA;MAVA,CADA;MAeAC;QACAR;MADA;IAfA,EAJA,CAwBA;;IACA;IACA;EACA,CA7CA;EA8CAS;IACAC,MADA,oBACA;MAAA;;MACA;MACA;MACA;MACA;MAEA;MACA;MAEA,2CATA,CAUA;MAEA;;MACA;QACA;UACA;;UAEA,0CAHA,CAGA;;QACA;MACA,CANA,EAbA,CAqBA;;MACA;QACA;QACA;UACA,gDADA,CAEA;QACA;;QAEA;UACA,gDADA,CAEA;QACA;MACA,CAXA;MAaA;IACA;EArCA;AA9CA","names":["name","data","container","blitzboard","config","graph","inputpg","dialog","created","console","mounted","node","caption","defaultIcon","icon","Property","Tax","Account","Income","color","edge","methods","redraw"],"sourceRoot":"src/views","sources":["Graph.vue"],"sourcesContent":["<template>\n  <v-main class=\"grey lighten-3\">\n    <v-container fluid>\n      <v-row>\n        <v-col>\n          <v-sheet min-height=\"75vh\" rounded=\"lg\">\n            <div style=\"height: 80vh; width: 100%\" id=\"blitzboard\"></div>\n            <v-btn\n              @click=\"dialog = !dialog\"\n              color=\"#c83b29\"\n              absolute\n              fab\n              large\n              dark\n              bottom\n              right\n            >\n              <v-icon>mdi-chevron-up</v-icon>\n            </v-btn>\n          </v-sheet>\n        </v-col>\n      </v-row>\n\n      <v-dialog v-model=\"dialog\" persistent max-width=\"500px\">\n        <v-card>\n          <v-card-title>\n            <span class=\"text-h5\">PG Query</span>\n          </v-card-title>\n          <v-card-text class=\"pa-0\">\n            <v-container fluid class=\"pa-2\">\n              <v-textarea\n                outlined\n                name=\"input-pg\"\n                label=\"PG Query\"\n                v-model=\"inputpg\"\n                counter=\"6\"\n              ></v-textarea>\n            </v-container>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"blue darken-1\" text @click=\"redraw\">\n              Submit\n            </v-btn>\n            <v-btn color=\"blue darken-1\" text @click=\"dialog = false\">\n              Cancel\n            </v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-main>\n</template>\n\n<script>\nexport default {\n  name: \"Graph\",\n\n  data: () => ({\n    container: null,\n    blitzboard: null,\n    config: null,\n    graph: null,\n    inputpg: \"\",\n    dialog: false,\n  }),\n  created() {\n        this.$EventBus.$on(\"querySubmit\", (formData) => {\n            console.log(formData.input1);\n\n            // TODO: Parameter로 받아서 PGQL을 생성하고 Graph Server로 쿼리를 전달\n        })\n    },\n  mounted() {\n    this.container = document.getElementById(\"blitzboard\");\n    this.blitzboard = new Blitzboard(this.container); // no-undef\n\n    this.config = {\n      node: {\n        caption: [\"name\"],\n        defaultIcon: false,\n        icon: {\n          'Person': \"akar-icons:person\",\n          Property: \"f38f\",\n          Tax: \"f119\",\n          Account: \"f119\",\n          Income: \"f316\",\n        },\n        color: {\n          'Person': 'blue'\n        }\n      },\n      edge: {\n        caption: [\"label\"],\n      },\n    };\n\n    // pg를 통해서 그래프 생성\n    this.blitzboard.setGraph(this.graph, false);\n    this.blitzboard.setConfig(this.config);\n  },\n  methods: {\n    redraw() {\n      // if(this.graph != null) {\n      //   console.log(\"not null\");\n      //   this.graph = null;\n      // }\n\n      // sample #1\n      this.graph = this.inputpg;\n\n      this.blitzboard.setGraph(this.graph, true);\n      //this.blitzboard.setConfig(this.config);\n\n      // 한번 클릭 시 해당 노드를 기준으로 쿼리\n      this.blitzboard.network.on(\"click\", (e) => {\n        if (e.nodes.length > 0) {\n          let node = this.blitzboard.nodeMap[e.nodes[0]];\n\n          this.blitzboard.scrollNodeIntoView(node); // 해당 노드를 하이라이트하여 중앙으로 이동시킴\n        }\n      });\n\n      // 더블 클릭 시 속성값 가져오기\n      this.blitzboard.network.on(\"doubleClick\", (e) => {\n        //console.log(blitzboard.config);\n        if (e.nodes.length > 0) {\n          let node = this.blitzboard.nodeMap[e.nodes[0]];\n          //console.log(node);\n        }\n\n        if (e.edges.length > 0) {\n          let edge = this.blitzboard.edgeMap[e.edges[0]];\n          //console.log(edge);\n        }\n      });\n\n      this.dialog = !this.dialog;\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}