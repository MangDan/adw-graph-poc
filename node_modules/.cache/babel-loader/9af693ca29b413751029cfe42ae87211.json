{"ast":null,"code":"import \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"Graph\",\n  data: function data() {\n    return {\n      container: null,\n      blitzboard: null,\n      config: null,\n      graph: null,\n      inputpg: \"\",\n      dialog: false,\n      graphData: null\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$EventBus.$on(\"querySubmit\", function (formData) {\n      console.log(formData.graph);\n      console.log(formData.limit);\n      var query = '';\n      query = query + 'SELECT * FROM MATCH (n1)-[e]-(n2) ';\n      query = query + \"LIMIT 10\";\n\n      _this.$axios({\n        method: \"get\",\n        url: \"/ui/v1/query?pgql=\" + encodeURI(query) + '&graph=' + formData.graph,\n        headers: {\n          'Content-type': 'application/json'\n        },\n        withCredentials: true,\n        cossDomain: true\n      }).then(function (response) {\n        var nodes = [];\n        var edges = [];\n        var result = response.data;\n        result.graph.vertices.forEach(function (elem) {\n          var node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          console.log(\"node = \" + node);\n          nodes.push(node);\n        });\n        result.graph.edges.forEach(function (elem) {\n          var edge = {\n            id: elem._id,\n            from: elem.s,\n            to: elem.d,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              edge.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          console.log(\"edge = \" + edge);\n          edges.push(edge);\n        });\n        _this.graphData = {\n          \"nodes\": nodes,\n          \"edges\": edges\n        };\n\n        _this.blitzboard.setGraph(_this.graphData, true);\n\n        _this.blitzboard.setConfig(_this.config);\n      }); //         this.$axios({\n      //         method: \"get\",\n      //         url: \"/ui/v1/query?pgql=\" + encodeURI(query) + '&graph=G_NH_STOCK',\n      //         headers: { 'Content-type': 'application/json' },\n      //         withCredentials: true,\n      //         cossDomain: true\n      //       }).then(function (response) {\n      //           console.log(response.status)\n      //           var nodes = []\n      //           var edges = []\n      //           let result = response.data\n      //           // Nodes\n      //           result.graph.vertices.forEach((elem) => {\n      //             let node = {\n      //               id: elem._id,\n      //               labels: elem.l,\n      //               properties: {}\n      //             };\n      //             elem.p.forEach((elem_p) => {\n      //               if (elem_p.v) {\n      //                 node.properties[elem_p.n] = [elem_p.v];\n      //               }\n      //             });\n      //             console.log(\"node = \" + node);\n      //             nodes.push(node)\n      //           });\n      //           // Edges\n      //           result.graph.edges.forEach((elem) => {\n      //             let edge = {\n      //               id: elem._id,\n      //               from: elem.s,\n      //               to: elem.d,\n      //               labels: elem.l,\n      //               properties: {}\n      //             };\n      //             elem.p.forEach((elem_p) => {\n      //               if (elem_p.v) {\n      //                 edge.properties[elem_p.n] = [elem_p.v];\n      //               }\n      //             });\n      //             console.log(\"edge = \" + edge);\n      //             edges.push(edge)\n      //           });\n      //           let jsonData = { \"nodes\": nodes, \"edges\": edges }\n      //           console.log(\"^^^^^^^^^^^^^^^^^^^^^^^^^^^\")\n      //           console.log(jsonData)\n      //           console.log(\"^^^^^^^^^^^^^^^^^^^^^^^^^^^\")\n      //         })\n      //         .catch(function (error) {\n      //           //console.log(error)\n      //         })\n      //         .then(function () {\n      //         }).catch(error => {\n      //           console.log(error);\n      //       });\n      //       }\n      // TODO: Parameter로 받아서 PGQL을 생성하고 Graph Server로 쿼리를 전달\n      // this.$axios({\n      //   method: \"get\",\n      //   url: \"/api/v1/meetup/envs?sort=num,asc\",\n      //   headers: { \"Content-Type\": \"application/json\" }\n      // }).then(result => { \n      //     this.envs = result.data;\n      // }).catch(error => {\n      //     console.log(error.response.data);\n      // });\n      // reconfig 테스트\n      //this.reConfig();\n\n    });\n    this.$EventBus.$on(\"initGraph\", function (config) {\n      _this.container = document.getElementById(\"blitzboard\");\n      _this.blitzboard = new Blitzboard(_this.container); // no-undef\n\n      _this.config = config; // pg를 통해서 그래프 생성\n\n      _this.blitzboard.setGraph('', false);\n\n      _this.blitzboard.setConfig(_this.config);\n    });\n    this.$EventBus.$on(\"updateGraph\", function (config) {\n      _this.container = document.getElementById(\"blitzboard\");\n      _this.config = config; // pg를 통해서 그래프 생성\n\n      _this.blitzboard.setGraph(_this.graph, false);\n\n      _this.blitzboard.setConfig(_this.config);\n    });\n  },\n  mounted: function mounted() {// this.container = document.getElementById(\"blitzboard\");\n    // this.blitzboard = new Blitzboard(this.container); // no-undef\n    // this.config = {\n    //   node: {\n    //     caption: [\"id\"],\n    //     defaultIcon: false,\n    //     icon: {\n    //       종목: \"ant-design:stock-outlined\",\n    //       Property: \"f38f\",\n    //       Tax: \"f119\",\n    //       Account: \"f119\",\n    //       Income: \"f316\"\n    //     },\n    //     shape: {\n    //       종목: 'square',\n    //       기관: 'dot'\n    //     },\n    //     size: {\n    //       person: 30\n    //     }\n    //   },\n    //   edge: {\n    //     caption: [\"label\"],\n    //     color: {\n    //       say1: 'red'\n    //     },\n    //   },\n    // };\n    // // pg를 통해서 그래프 생성\n    // this.blitzboard.setGraph('', false);\n    // this.blitzboard.setConfig(this.config);\n  },\n  methods: {\n    redraw: function redraw() {\n      var _this2 = this;\n\n      // if(this.graph != null) {\n      //   console.log(\"not null\");\n      //   this.graph = null;\n      // }\n      // sample #1\n      this.graph = this.inputpg;\n      this.blitzboard.setGraph(this.graph, true);\n      this.blitzboard.setConfig(this.config); // 한번 클릭 시 해당 노드를 기준으로 쿼리\n\n      this.blitzboard.network.on(\"click\", function (e) {\n        if (e.nodes.length > 0) {\n          var node = _this2.blitzboard.nodeMap[e.nodes[0]];\n\n          _this2.blitzboard.scrollNodeIntoView(node); // 해당 노드를 하이라이트하여 중앙으로 이동시킴\n\n        }\n      }); // 더블 클릭 시 속성값 가져오기\n\n      this.blitzboard.network.on(\"doubleClick\", function (e) {\n        //console.log(blitzboard.config);\n        if (e.nodes.length > 0) {\n          var node = _this2.blitzboard.nodeMap[e.nodes[0]];\n        }\n\n        _this2.blitzboard.getAllNodes();\n\n        if (e.edges.length > 0) {\n          var edge = _this2.blitzboard.edgeMap[e.edges[0]]; //console.log(edge);\n        }\n      });\n      this.dialog = !this.dialog;\n    },\n    reConfig: function reConfig() {\n      this.config = {\n        node: {\n          caption: [\"id\"],\n          defaultIcon: false,\n          icon: {\n            'person': \"akar-icons:person\",\n            Property: \"f38f\",\n            Tax: \"f119\",\n            Account: \"f119\",\n            Income: \"f316\"\n          },\n          shape: {\n            'person': 'triangle',\n            'graph': 'square'\n          },\n          size: {\n            'person': 10\n          }\n        },\n        edge: {\n          caption: [\"label\"],\n          color: {\n            'say1': 'green'\n          }\n        }\n      }; // pg를 통해서 그래프 생성\n\n      this.blitzboard.setGraph(this.graph, false);\n      this.blitzboard.setConfig(this.config);\n    }\n  }\n};","map":{"version":3,"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqDA;EACAA,aADA;EAGAC;IAAA;MACAC,eADA;MAEAC,gBAFA;MAGAC,YAHA;MAIAC,WAJA;MAKAC,WALA;MAMAC,aANA;MAOAC;IAPA;EAAA,CAHA;EAYAC,OAZA,qBAYA;IAAA;;IACA;MACAC;MACAA;MAEA;MACAC;MACAA;;MAEA;QACAC,aADA;QAEAC,yEAFA;QAGAC;UAAA;QAAA,CAHA;QAIAC,qBAJA;QAKAC;MALA,GAMAC,IANA,CAMA;QACA;QACA;QACA;QAEAC;UACA;YACAC,YADA;YAEAC,cAFA;YAGAC;UAHA;UAKAC;YACA;cACAC;YACA;UACA,CAJA;UAKAb;UACAc;QACA,CAbA;QAeAN;UACA;YACAC,YADA;YAEAM,YAFA;YAGAC,UAHA;YAIAN,cAJA;YAKAC;UALA;UAOAC;YACA;cACAK;YACA;UACA,CAJA;UAMAjB;UACAkB;QACA,CAhBA;QAkBA;UAAA;UAAA;QAAA;;QACA;;QACA;MACA,CA/CA,EARA,CA0DA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MACA;MAEA;MACA;MACA;MACA;MAKA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;MACA;;IAEA,CAtIA;IAuIA;MACA;MACA,mDAFA,CAEA;;MACA,sBAHA,CAKA;;MACA;;MACA;IACA,CARA;IAUA;MACA;MACA,sBAFA,CAIA;;MACA;;MACA;IACA,CAPA;EAQA,CAtKA;EAuKAC,OAvKA,qBAuKA,CACA;IACA;IAEA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IACA;IAEA;IACA;IACA;EACA,CAzMA;EA0MAC;IACAC,MADA,oBACA;MAAA;;MACA;MACA;MACA;MACA;MAEA;MACA;MAEA;MACA,uCAVA,CAYA;;MACA;QACA;UACA;;UAEA,2CAHA,CAGA;;QACA;MACA,CANA,EAbA,CAqBA;;MACA;QACA;QACA;UACA;QACA;;QAEA;;QAEA;UACA,iDADA,CAEA;QACA;MACA,CAZA;MAcA;IACA,CAtCA;IAuCAC,QAvCA,sBAuCA;MACA;QACAT;UACAU,eADA;UAEAC,kBAFA;UAGAC;YACA,6BADA;YAEAC,gBAFA;YAGAC,WAHA;YAIAC,eAJA;YAKAC;UALA,CAHA;UAUAC;YACA,oBADA;YAEA;UAFA,CAVA;UAcAC;YACA;UADA;QAdA,CADA;QAmBAd;UACAM,kBADA;UAEAS;YACA;UADA;QAFA;MAnBA,EADA,CA4BA;;MACA;MACA;IACA;EAtEA;AA1MA","names":["name","data","container","blitzboard","config","graph","inputpg","dialog","graphData","created","console","query","method","url","headers","withCredentials","cossDomain","then","result","id","labels","properties","elem","node","nodes","from","to","edge","edges","mounted","methods","redraw","reConfig","caption","defaultIcon","icon","Property","Tax","Account","Income","shape","size","color"],"sourceRoot":"src/views","sources":["Graph.vue"],"sourcesContent":["<template>\n  <v-main class=\"grey lighten-3\">\n    <v-container fluid>\n      <v-row>\n        <v-col>\n          <v-sheet min-height=\"75vh\" rounded=\"lg\">\n            <div style=\"height: 80vh; width: 100%\" id=\"blitzboard\"></div>\n            <v-btn\n              @click=\"dialog = !dialog\"\n              color=\"#c83b29\"\n              absolute\n              fab\n              large\n              dark\n              bottom\n              right\n            >\n              <v-icon>mdi-chevron-up</v-icon>\n            </v-btn>\n          </v-sheet>\n        </v-col>\n      </v-row>\n\n      <v-dialog v-model=\"dialog\" persistent max-width=\"500px\">\n        <v-card>\n          <v-card-title>\n            <span class=\"text-h5\">PG Query</span>\n          </v-card-title>\n          <v-card-text class=\"pa-0\">\n            <v-container fluid class=\"pa-2\">\n              <v-textarea\n                outlined\n                name=\"input-pg\"\n                label=\"PG Query\"\n                v-model=\"inputpg\"\n                counter=\"6\"\n              ></v-textarea>\n            </v-container>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"blue darken-1\" text @click=\"redraw\"> Submit </v-btn>\n            <v-btn color=\"blue darken-1\" text @click=\"dialog = false\">\n              Cancel\n            </v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-main>\n</template>\n\n<script>\nexport default {\n  name: \"Graph\",\n\n  data: () => ({\n    container: null,\n    blitzboard: null,\n    config: null,\n    graph: null,\n    inputpg: \"\",\n    dialog: false,\n    graphData: null,\n  }),\n  created() {\n        this.$EventBus.$on(\"querySubmit\", (formData) => {\n            console.log(formData.graph);\n            console.log(formData.limit);\n\n        let query = ''\n            query = query + 'SELECT * FROM MATCH (n1)-[e]-(n2) ';\n            query = query + \"LIMIT 10\";\n\n        this.$axios({\n          method: \"get\",\n          url: \"/ui/v1/query?pgql=\" + encodeURI(query) + '&graph='+formData.graph,\n          headers: { 'Content-type': 'application/json' },\n          withCredentials: true,\n          cossDomain: true\n         }).then(response => {\n            var nodes = []\n            var edges = []\n            let result = response.data;\n            \n            result.graph.vertices.forEach((elem) => {\n              let node = {\n                id: elem._id,\n                labels: elem.l,\n                properties: {}\n              };\n              elem.p.forEach((elem_p) => {\n                if (elem_p.v) {\n                  node.properties[elem_p.n] = [elem_p.v];\n                }\n              });\n              console.log(\"node = \" + node);\n              nodes.push(node)\n            });\n\n            result.graph.edges.forEach((elem) => {\n              let edge = {\n                id: elem._id,\n                from: elem.s,\n                to: elem.d,\n                labels: elem.l,\n                properties: {}\n              };\n              elem.p.forEach((elem_p) => {\n                if (elem_p.v) {\n                  edge.properties[elem_p.n] = [elem_p.v];\n                }\n              });\n\n              console.log(\"edge = \" + edge);\n              edges.push(edge)\n            });\n\n            this.graphData = { \"nodes\": nodes, \"edges\": edges };\n            this.blitzboard.setGraph(this.graphData, true);\n            this.blitzboard.setConfig(this.config);\n          });\n          \n\n//         this.$axios({\n//         method: \"get\",\n//         url: \"/ui/v1/query?pgql=\" + encodeURI(query) + '&graph=G_NH_STOCK',\n//         headers: { 'Content-type': 'application/json' },\n//         withCredentials: true,\n//         cossDomain: true\n//       }).then(function (response) {\n//           console.log(response.status)\n//           var nodes = []\n//           var edges = []\n//           let result = response.data\n//           // Nodes\n//           result.graph.vertices.forEach((elem) => {\n//             let node = {\n//               id: elem._id,\n//               labels: elem.l,\n//               properties: {}\n//             };\n//             elem.p.forEach((elem_p) => {\n//               if (elem_p.v) {\n//                 node.properties[elem_p.n] = [elem_p.v];\n//               }\n//             });\n//             console.log(\"node = \" + node);\n//             nodes.push(node)\n//           });\n//           // Edges\n//           result.graph.edges.forEach((elem) => {\n//             let edge = {\n//               id: elem._id,\n//               from: elem.s,\n//               to: elem.d,\n//               labels: elem.l,\n//               properties: {}\n//             };\n//             elem.p.forEach((elem_p) => {\n//               if (elem_p.v) {\n//                 edge.properties[elem_p.n] = [elem_p.v];\n//               }\n//             });\n\n//             console.log(\"edge = \" + edge);\n//             edges.push(edge)\n//           });\n//           let jsonData = { \"nodes\": nodes, \"edges\": edges }\n//           console.log(\"^^^^^^^^^^^^^^^^^^^^^^^^^^^\")\n//           console.log(jsonData)\n//           console.log(\"^^^^^^^^^^^^^^^^^^^^^^^^^^^\")\n                  \n//         })\n//         .catch(function (error) {\n//           //console.log(error)\n//         })\n//         .then(function () {\n\n//         }).catch(error => {\n//           console.log(error);\n//       });\n//       }\n        \n\n\n    \n            // TODO: Parameter로 받아서 PGQL을 생성하고 Graph Server로 쿼리를 전달\n            // this.$axios({\n            //   method: \"get\",\n            //   url: \"/api/v1/meetup/envs?sort=num,asc\",\n            //   headers: { \"Content-Type\": \"application/json\" }\n            // }).then(result => { \n            //     this.envs = result.data;\n            // }).catch(error => {\n            //     console.log(error.response.data);\n            // });\n            // reconfig 테스트\n            //this.reConfig();\n\n        });\n        this.$EventBus.$on(\"initGraph\", (config) => {\n          this.container = document.getElementById(\"blitzboard\");\n          this.blitzboard = new Blitzboard(this.container); // no-undef\n          this.config = config;\n\n          // pg를 통해서 그래프 생성\n          this.blitzboard.setGraph('', false);\n          this.blitzboard.setConfig(this.config);\n        });\n\n        this.$EventBus.$on(\"updateGraph\", (config) => {\n          this.container = document.getElementById(\"blitzboard\");\n          this.config = config;\n\n          // pg를 통해서 그래프 생성\n          this.blitzboard.setGraph(this.graph, false);\n          this.blitzboard.setConfig(this.config);\n        });\n    },\n  mounted() {\n    // this.container = document.getElementById(\"blitzboard\");\n    // this.blitzboard = new Blitzboard(this.container); // no-undef\n\n    // this.config = {\n    //   node: {\n    //     caption: [\"id\"],\n    //     defaultIcon: false,\n    //     icon: {\n    //       종목: \"ant-design:stock-outlined\",\n    //       Property: \"f38f\",\n    //       Tax: \"f119\",\n    //       Account: \"f119\",\n    //       Income: \"f316\"\n    //     },\n    //     shape: {\n    //       종목: 'square',\n    //       기관: 'dot'\n    //     },\n    //     size: {\n    //       person: 30\n    //     }\n    //   },\n    //   edge: {\n    //     caption: [\"label\"],\n    //     color: {\n    //       say1: 'red'\n    //     },\n    //   },\n    // };\n\n    // // pg를 통해서 그래프 생성\n    // this.blitzboard.setGraph('', false);\n    // this.blitzboard.setConfig(this.config);\n  },\n  methods: {\n    redraw() {\n      // if(this.graph != null) {\n      //   console.log(\"not null\");\n      //   this.graph = null;\n      // }\n\n      // sample #1\n      this.graph = this.inputpg;\n\n      this.blitzboard.setGraph(this.graph, true);\n      this.blitzboard.setConfig(this.config);\n\n      // 한번 클릭 시 해당 노드를 기준으로 쿼리\n      this.blitzboard.network.on(\"click\", (e) => {\n        if (e.nodes.length > 0) {\n          let node = this.blitzboard.nodeMap[e.nodes[0]];\n\n          this.blitzboard.scrollNodeIntoView(node); // 해당 노드를 하이라이트하여 중앙으로 이동시킴\n        }\n      });\n\n      // 더블 클릭 시 속성값 가져오기\n      this.blitzboard.network.on(\"doubleClick\", (e) => {\n        //console.log(blitzboard.config);\n        if (e.nodes.length > 0) {\n          let node = this.blitzboard.nodeMap[e.nodes[0]];\n        }\n\n        this.blitzboard.getAllNodes();\n\n        if (e.edges.length > 0) {\n          let edge = this.blitzboard.edgeMap[e.edges[0]];\n          //console.log(edge);\n        }\n      });\n\n      this.dialog = !this.dialog;\n    },\n    reConfig() {\n      this.config = {\n      node: {\n        caption: [\"id\"],\n        defaultIcon: false,\n        icon: {\n          'person': \"akar-icons:person\",\n          Property: \"f38f\",\n          Tax: \"f119\",\n          Account: \"f119\",\n          Income: \"f316\"\n        },\n        shape: {\n          'person': 'triangle',\n          'graph': 'square'\n        },\n        size: {\n          'person': 10\n        }\n      },\n      edge: {\n        caption: [\"label\"],\n        color: {\n          'say1': 'green'\n        },\n      },\n    };\n\n    // pg를 통해서 그래프 생성\n    this.blitzboard.setGraph(this.graph, false);\n    this.blitzboard.setConfig(this.config);\n    }\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}