{"ast":null,"code":"import _createForOfIteratorHelper from \"/home/opc/adw-graph-poc/node_modules/@babel/runtime/helpers/esm/createForOfIteratorHelper.js\";\nimport \"core-js/modules/es.array.slice.js\";\nimport \"core-js/modules/es.object.to-string.js\";\nimport \"core-js/modules/web.dom-collections.for-each.js\";\nimport \"core-js/modules/es.array.filter.js\";\nimport \"core-js/modules/es.array.includes.js\";\nimport \"core-js/modules/es.string.includes.js\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nexport default {\n  name: \"Graph\",\n  data: function data() {\n    return {\n      container: null,\n      blitzboard: null,\n      config: null,\n      graph: null,\n      inputpg: \"SELECT * FROM MATCH (n1)-[e]-(n2) ON G_NH_STOCK LIMIT 20\",\n      dialog: false,\n      graphData: null,\n      registerClickEvent: false,\n      curation: false,\n      curationDrawer: false,\n      graphItems: [{\n        text: \"종목\",\n        value: \"G_NH_STOCK\"\n      }, {\n        text: \"제품\",\n        value: \"G_NH_PRODUCT\"\n      }, {\n        text: \"인물\",\n        value: \"G_NH_PEOPLE\"\n      }, {\n        text: \"테마\",\n        value: \"G_NH_THEME\"\n      }, // by iron - 기관 회사 이벤트 추가\n      {\n        text: \"기관\",\n        value: \"G_NH_AGENT\"\n      }, {\n        text: \"회사\",\n        value: \"G_NH_COMPANY\"\n      }, {\n        text: \"이벤트\",\n        value: \"G_NH_EVENT\"\n      }],\n      // by iron -- breadcrumb 데이터 추가 시작\n      navItems: [{\n        text: \"시작\",\n        disabled: true,\n        href: \"\"\n      }],\n      // by iron -- breadcrumb 데이터 추가 끝\n      isNodeChange: false\n    };\n  },\n  created: function created() {\n    var _this = this;\n\n    this.$EventBus.$on(\"nodeChange\", function (isNodeChange) {\n      _this.isNodeChange = isNodeChange;\n    });\n    this.$EventBus.$on(\"changeLayout\", function (layoutData) {\n      _this.config.layout = layoutData.layout;\n      _this.config.layoutSettings = layoutData.layoutSettings;\n\n      _this.blitzboard.setGraph(_this.graph, true);\n\n      _this.blitzboard.setConfig(_this.config);\n\n      _this.registerClickEventonGraph();\n    });\n    this.$EventBus.$on(\"clearGraph\", function () {\n      _this.blitzboard.setGraph(\"\"); // by iron -- breadcrumb 데이터 reset 시작\n\n\n      _this.clearBreadcrumb(); // by iron -- breadcrumb 데이터 reset 끝\n\n\n      _this.registerClickEvent = false;\n    });\n    this.$EventBus.$on(\"initGraph\", function (config) {\n      _this.container = document.getElementById(\"blitzboard\");\n      _this.blitzboard = new Blitzboard(_this.container); // no-undef\n\n      _this.config = config; // pg를 통해서 그래프 생성\n\n      _this.blitzboard.setGraph(\"\", false);\n\n      _this.blitzboard.setConfig(_this.config); //by iron\n\n\n      _this.clearBreadcrumb();\n\n      _this.registerClickEventonGraph();\n    });\n    this.$EventBus.$on(\"querySubmit\", function (formData) {\n      _this.registerClickEvent = false;\n      _this.formData = formData;\n      var query = \"\"; // by iron -- breadcrumb 데이터 reset 시작\n\n      _this.navItems = [{\n        text: \"시작\",\n        disabled: true,\n        href: \"\"\n      }]; // by iron -- breadcrumb 데이터 reset 끝\n      // Graph만\n      // by iron -- query 수정  ( 2022.6.6 18:33)\n\n      var edgePropQuery = \"n2\";\n\n      if (_this.formData.edgeProp.length > 0) {\n        edgePropQuery += \":\";\n\n        var _iterator = _createForOfIteratorHelper(_this.formData.edgeProp),\n            _step;\n\n        try {\n          for (_iterator.s(); !(_step = _iterator.n()).done;) {\n            var edgeProperty = _step.value;\n            edgePropQuery += '\"' + edgeProperty + '\"|';\n          }\n        } catch (err) {\n          _iterator.e(err);\n        } finally {\n          _iterator.f();\n        }\n\n        edgePropQuery = edgePropQuery.slice(0, -1);\n      }\n\n      console.log(edgePropQuery);\n\n      if (_this.formData.searchTerm === \"\") {\n        query += \"SELECT * FROM MATCH (n1)-[e]-(\" + edgePropQuery + \") \";\n        query += \"ON \" + _this.formData.graph + \" \";\n      } else {\n        query += \"SELECT * FROM MATCH (n1)-[e]-(\" + edgePropQuery + \") \";\n        query += \"ON \" + _this.formData.graph + \" \";\n        console.log(query); // by iron  --  그래프에 따른 parameter 변경 추가\n\n        var param = \"v_name\";\n\n        if (_this.formData.graph === \"G_NH_EVENT\") {\n          param = \"EVENT_NAME\";\n        } else if (_this.formData.graph === \"G_NH_COMPANY\") {\n          param = \"CORP_NAME\";\n        } else if (_this.formData.graph === \"G_NH_AGENT\") {\n          param = \"AGENT_NAME\";\n        }\n\n        query += \"WHERE JAVA_REGEXP_LIKE(n1.\" + param + \", '\" + _this.formData.searchTerm + \"') \";\n      }\n\n      if (_this.formData.limit !== \"\") {\n        query += \"LIMIT \" + _this.formData.limit;\n      }\n\n      console.log(query);\n\n      _this.$axios({\n        method: \"get\",\n        url: \"/ui/v1/query?pgql=\" + encodeURI(query) + \"&size=\" + _this.formData.size,\n        // + \"&graph=\" + this.formData.graph,  -- by iron\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        withCredentials: true,\n        cossDomain: true\n      }).then(function (response) {\n        var nodes = [];\n        var edges = [];\n        var result = response.data;\n        result.graph.vertices.forEach(function (elem) {\n          var node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          nodes.push(node);\n        });\n        result.graph.edges.forEach(function (elem) {\n          var edge = {\n            id: elem._id,\n            from: elem.s,\n            to: elem.d,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              edge.properties[elem_p.n] = [elem_p.v];\n\n              if (_this.formData.boldEdgeByAmount === true) {\n                if (edge.properties[\"RELATIONSHIP_AMOUNT\"] !== undefined) {\n                  if (edge.properties[\"RELATIONSHIP_AMOUNT\"][0] > 0) {\n                    edge.properties[\"weight\"] = \"5\";\n                  }\n\n                  console.log(edge.properties[\"RELATIONSHIP_AMOUNT\"][0]);\n                }\n              }\n            }\n          });\n          edges.push(edge);\n        });\n        _this.graphData = {\n          nodes: nodes,\n          edges: edges\n        };\n        console.log(_this.graphData);\n\n        _this.blitzboard.setGraph(_this.graphData, true);\n\n        _this.blitzboard.setConfig(_this.config);\n\n        var navText = _this.formData.searchTerm;\n\n        if (navText === \"\") {\n          navText = \"*\";\n        }\n\n        _this.navItems.push({\n          text: navText,\n          disabled: false,\n          href: \"\"\n        }); // by iron -- breadcrumb 데이터 푸쉬 끝\n\n\n        _this.registerClickEventonGraph();\n      });\n    });\n    this.$EventBus.$on(\"updateGraph\", function (config) {\n      _this.container = document.getElementById(\"blitzboard\");\n      _this.config = config; // pg를 통해서 그래프 생성\n\n      _this.blitzboard.setGraph(_this.graph, false);\n\n      _this.blitzboard.setConfig(_this.config);\n\n      _this.registerClickEventonGraph();\n    });\n  },\n  mounted: function mounted() {},\n  methods: {\n    registerClickEventonGraph: function registerClickEventonGraph() {\n      var _this2 = this;\n\n      if (this.registerClickEvent === false) {\n        // 더블클릭 시 해당 노드를 기준으로 쿼리\n        this.blitzboard.network.on(\"doubleClick\", function (e) {\n          if (e.nodes.length > 0) {\n            var node = _this2.blitzboard.nodeMap[e.nodes[0]];\n\n            _this2.queryByNodeId(node);\n\n            _this2.registerClickEvent = true;\n          }\n        }); // 클릭 시 속성값 가져오기\n\n        this.blitzboard.network.on(\"click\", function (e) {\n          if (e.nodes.length > 0) {\n            var node = _this2.blitzboard.nodeMap[e.nodes[0]];\n\n            _this2.$EventBus.$emit(\"nodeClicked\", node);\n\n            _this2.blitzboard.scrollNodeIntoView(node); // 우측 검색창 관련\n\n\n            var proxy = _this2.blitzboard.getNode(nodeId);\n\n            var searchKeyword = \"\";\n\n            if (proxy.properties['V_NAME'] != undefined) {\n              searchKeyword = proxy.properties['V_NAME'][0];\n            } else if (proxy.properties['AGENT_NAME'] != undefined) {\n              searchKeyword = proxy.properties['AGENT_NAME'][0];\n            } else if (proxy.properties['CORP_NAME'] != undefined) {\n              searchKeyword = proxy.properties['CORP_NAME'][0];\n            } else if (proxy.properties['EVENT_NAME'] != undefined) {\n              searchKeyword = proxy.properties['EVENT_NAME'][0];\n            }\n\n            console.log(searchKeyword);\n            _this2.curationDrawer = true;\n          } // if (e.edges.length > 0) {\n          //   let edge = this.blitzboard.edgeMap[e.edges[0]];\n          //   //console.log(edge);\n          // }\n\n        }); // this.blitzboard.network.on(\"oncontext\", (e) => {\n        //   console.log(e);\n        //   e.event.preventDefault();\n        //   let nodeId = this.blitzboard.network.getNodeAt(e.pointer.DOM);\n        //   let proxy = this.blitzboard.getNode(nodeId);\n        //   //\"V_NAME\", \"AGENT_NAME\", \"CORP_NAME\", \"EVENT_NAME\"\n        //   let searchKeyword = \"\";\n        //   if(proxy.properties['V_NAME'] != undefined) {\n        //     searchKeyword = proxy.properties['V_NAME'][0];\n        //   } else if(proxy.properties['AGENT_NAME'] != undefined) {\n        //     searchKeyword = proxy.properties['AGENT_NAME'][0];\n        //   } else if(proxy.properties['CORP_NAME'] != undefined) {\n        //     searchKeyword = proxy.properties['CORP_NAME'][0];\n        //   } else if(proxy.properties['EVENT_NAME'] != undefined) {\n        //     searchKeyword = proxy.properties['EVENT_NAME'][0];\n        //   }\n        //   console.log(searchKeyword);\n        //   this.curationDrawer = true;\n        // });\n      }\n    },\n    queryByNodeId: function queryByNodeId(node) {\n      var _this3 = this;\n\n      var graph = this.graphItems.filter(function (it) {\n        return it.text.includes(node.labels[0]);\n      });\n      var query = \"\";\n      var edgePropQuery = \"n2\";\n\n      if (this.formData.edgeProp.length > 0) {\n        edgePropQuery += \":\";\n\n        var _iterator2 = _createForOfIteratorHelper(this.formData.edgeProp),\n            _step2;\n\n        try {\n          for (_iterator2.s(); !(_step2 = _iterator2.n()).done;) {\n            var edgeProperty = _step2.value;\n            edgePropQuery += '\"' + edgeProperty + '\"|';\n          }\n        } catch (err) {\n          _iterator2.e(err);\n        } finally {\n          _iterator2.f();\n        }\n\n        edgePropQuery = edgePropQuery.slice(0, -1);\n      }\n\n      console.log(edgePropQuery);\n      query += \"SELECT * FROM MATCH (n1)-[e]-(\" + edgePropQuery + \") \";\n      query += \"ON \" + graph[0].value + \" \";\n      query += \"WHERE ID(n1) = '\" + node.id + \"' \";\n\n      if (this.formData.limit !== \"\") {\n        query += \"LIMIT \" + this.formData.limit;\n      }\n\n      this.blitzboard.showLoader();\n      this.$axios({\n        method: \"get\",\n        url: \"/ui/v1/query?pgql=\" + encodeURI(query) + \"&size=\" + this.formData.size,\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        withCredentials: true,\n        cossDomain: true\n      }).then(function (response) {\n        var nodes = [];\n        var edges = [];\n        var result = response.data; // Nodes\n\n        result.graph.vertices.forEach(function (elem) {\n          var node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          console.log(node); // ReDraw\n\n          if (_this3.isNodeChange) {\n            nodes.push(node);\n          } else {\n            // Add\n            _this3.blitzboard.addNode(node, false);\n          }\n        }); // Edges\n\n        result.graph.edges.forEach(function (elem) {\n          // 여러번 클릭한 경우 동일한 엣지가 계속 생성되는 걸 방지...\n          if (!_this3.blitzboard.hasEdge(elem.s, elem.d)) {\n            var edge = {\n              id: elem._id,\n              from: elem.s,\n              to: elem.d,\n              labels: elem.l,\n              properties: {}\n            };\n            elem.p.forEach(function (elem_p) {\n              console.log(elem_p.n);\n\n              if (elem_p.v) {\n                edge.properties[elem_p.n] = [elem_p.v];\n                edge.properties[\"weight\"] = \"1.3\";\n                edge.properties[\"color\"] = \"red\";\n              }\n            }); // ReDraw\n\n            if (_this3.isNodeChange) {\n              edges.push(edge);\n            } else {\n              // Add\n              _this3.blitzboard.addEdge(edge, false);\n            }\n          }\n        }); // Update\n\n        if (_this3.isNodeChange) {\n          _this3.graphData = {\n            nodes: nodes,\n            edges: edges\n          };\n\n          _this3.blitzboard.setGraph(_this3.graphData, true);\n\n          _this3.blitzboard.setConfig(_this3.config);\n\n          _this3.registerClickEvent = false;\n        } else {\n          _this3.blitzboard.update();\n        }\n\n        _this3.registerClickEventonGraph(); // by iron - insert breadcrumb\n\n\n        _this3.insertBreadcrumb(node);\n\n        setTimeout(function () {\n          return _this3.blitzboard.scrollNodeIntoView(node);\n        }, 1500);\n\n        _this3.blitzboard.hideLoader();\n      });\n    },\n    // by iron\n    // redraw() query 를 받아서 그래프 구성\n    // 기존 JSON 구조에서 Query 던지는 것으로 바꿈\n    redraw: function redraw() {\n      var _this4 = this;\n\n      //this.graph = this.inputpg;\n      var query = this.inputpg;\n      this.$axios({\n        method: \"get\",\n        url: \"/ui/v1/query?pgql=\" + encodeURI(query) + \"&size=10000\",\n        // + \"&graph=\" + this.formData.graph,\n        headers: {\n          \"Content-type\": \"application/json\"\n        },\n        withCredentials: true,\n        cossDomain: true\n      }).then(function (response) {\n        var nodes = [];\n        var edges = [];\n        var result = response.data;\n        result.graph.vertices.forEach(function (elem) {\n          var node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          nodes.push(node);\n        });\n        result.graph.edges.forEach(function (elem) {\n          var edge = {\n            id: elem._id,\n            from: elem.s,\n            to: elem.d,\n            labels: elem.l,\n            properties: {}\n          };\n          elem.p.forEach(function (elem_p) {\n            if (elem_p.v) {\n              edge.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          edges.push(edge);\n        });\n        _this4.graphData = {\n          nodes: nodes,\n          edges: edges\n        };\n        console.log(_this4.graphData);\n\n        _this4.blitzboard.setGraph(\"\");\n\n        _this4.blitzboard.setGraph(_this4.graphData, true);\n\n        _this4.blitzboard.setConfig(_this4.config);\n\n        _this4.registerClickEventonGraph(); //by iron\n\n\n        _this4.clearBreadcrumb();\n\n        _this4.dialog = !_this4.dialog;\n      });\n    },\n    reConfig: function reConfig() {\n      this.config = {\n        node: {\n          caption: [\"id\"],\n          defaultIcon: false,\n          icon: {\n            person: \"akar-icons:person\",\n            Property: \"f38f\",\n            Tax: \"f119\",\n            Account: \"f119\",\n            Income: \"f316\"\n          },\n          shape: {\n            person: \"triangle\",\n            graph: \"square\"\n          },\n          size: {\n            person: 10\n          }\n        },\n        edge: {\n          caption: [\"label\"],\n          color: {\n            say1: \"green\"\n          }\n        }\n      }; // pg를 통해서 그래프 생성\n\n      this.blitzboard.setGraph(this.graph, false);\n      this.blitzboard.setConfig(this.config);\n    },\n    // by iron -- breadcrumb 데이터 clear\n    clearBreadcrumb: function clearBreadcrumb() {\n      this.navItems = [{\n        text: \"시작\",\n        disabled: true,\n        href: \"\"\n      }];\n    },\n    // by iron - breadcrumbs 아이템 추가\n    insertBreadcrumb: function insertBreadcrumb(node) {\n      var navText = \"\";\n\n      switch (node.labels[0]) {\n        case \"기관\":\n          navText = node.properties.AGENT_NAME[0];\n          break;\n\n        case \"이벤트\":\n          navText = node.properties.EVENT_NAME[0];\n          break;\n\n        case \"회사\":\n          navText = node.properties.CORP_NAME[0];\n          break;\n\n        default:\n          navText = node.properties.V_NAME[0];\n          break;\n      } // console.log(\"navTExt:\" + navText);\n      // let last = this.navItems[this.navItems.length - 1];\n      // console.log(\"last:\" + last.text);\n      // if (last.text !== navText) {\n      //   this.navItems.push({\n      //     text: navText,\n      //     disabled: true,\n      //     href: \"\",\n      //   });\n      // }\n\n\n      this.navItems.push({\n        text: navText,\n        disabled: true,\n        href: \"\"\n      });\n    }\n  }\n};","map":{"version":3,"mappings":"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","names":["name","data","container","blitzboard","config","graph","inputpg","dialog","graphData","registerClickEvent","curation","curationDrawer","graphItems","text","value","navItems","disabled","href","isNodeChange","created","edgePropQuery","console","query","param","method","url","encodeURI","headers","withCredentials","cossDomain","then","result","id","labels","properties","elem","node","nodes","from","to","edge","edges","navText","mounted","methods","registerClickEventonGraph","searchKeyword","queryByNodeId","it","setTimeout","redraw","reConfig","caption","defaultIcon","icon","person","Property","Tax","Account","Income","shape","size","color","say1","clearBreadcrumb","insertBreadcrumb"],"sourceRoot":"src/views","sources":["Graph.vue"],"sourcesContent":["<template>\n  <v-main class=\"grey lighten-3\">\n    <v-container fluid>\n      <v-row>\n        <v-col class=\"pt-0 mt-0\">\n          <v-sheet min-height=\"78vh\" rounded=\"lg\">\n            <div style=\"height: 78vh; width: 98%\" id=\"blitzboard\"></div>\n            <!-- by iron v-breadcrums 추가  시작 -->\n            <!--v-breadcrumbs :items=\"navItems\" divider=\"-\"></v-breadcrumbs-->\n            <v-breadcrumbs :items=\"navItems\">\n              <template v-slot:divider>\n                <v-icon>mdi-forward</v-icon>\n              </template>\n            </v-breadcrumbs>\n            <v-navigation-drawer\n      v-model=\"curationDrawer\" style=\"z-index: 3\"\n      absolute\n      right\n    >\n    <template v-slot:prepend>\n        \n      </template>\n    </v-navigation-drawer>\n            <!-- by iron v-breadcrums 추가  끝 -->\n            <v-btn\n              @click=\"dialog = !dialog\"\n              color=\"#c83b29\"\n              absolute\n              fab\n              large\n              dark\n              bottom\n              right\n            >\n              <v-icon>mdi-chevron-up</v-icon>\n            </v-btn>\n          </v-sheet>\n        </v-col>\n      </v-row>\n\n      <v-dialog v-model=\"dialog\" persistent max-width=\"500px\">\n        <v-card>\n          <v-card-title>\n            <!-- by iron 타이틀 변경 시작 -->\n            <span class=\"text-h5\">PG Query 직접 입력</span>\n            <!-- by iron 타이틀 변경  끝-->\n          </v-card-title>\n          <v-card-text class=\"pa-0\">\n            <v-container fluid class=\"pa-2\">\n              <v-textarea\n                outlined\n                name=\"input-pg\"\n                label=\"PG Query\"\n                v-model=\"inputpg\"\n                counter=\"6\"\n              >\n              </v-textarea>\n            </v-container>\n          </v-card-text>\n          <v-card-actions>\n            <v-spacer></v-spacer>\n            <v-btn color=\"blue darken-1\" text @click=\"redraw\"> Submit </v-btn>\n            <v-btn color=\"blue darken-1\" text @click=\"dialog = false\">\n              Cancel\n            </v-btn>\n          </v-card-actions>\n        </v-card>\n      </v-dialog>\n    </v-container>\n  </v-main>\n</template>\n\n<script>\nexport default {\n  name: \"Graph\",\n\n  data: () => ({\n    container: null,\n    blitzboard: null,\n    config: null,\n    graph: null,\n    inputpg: \"SELECT * FROM MATCH (n1)-[e]-(n2) ON G_NH_STOCK LIMIT 20\",\n    dialog: false,\n    graphData: null,\n    registerClickEvent: false,\n    curation: false,\n    curationDrawer: false,\n    graphItems: [\n      { text: \"종목\", value: \"G_NH_STOCK\" },\n      { text: \"제품\", value: \"G_NH_PRODUCT\" },\n      { text: \"인물\", value: \"G_NH_PEOPLE\" },\n      { text: \"테마\", value: \"G_NH_THEME\" },\n      // by iron - 기관 회사 이벤트 추가\n      { text: \"기관\", value: \"G_NH_AGENT\" },\n      { text: \"회사\", value: \"G_NH_COMPANY\" },\n      { text: \"이벤트\", value: \"G_NH_EVENT\" },\n    ],\n    // by iron -- breadcrumb 데이터 추가 시작\n    navItems: [\n      {\n        text: \"시작\",\n        disabled: true,\n        href: \"\",\n      },\n    ],\n    // by iron -- breadcrumb 데이터 추가 끝\n    isNodeChange: false,\n  }),\n  created() {\n    this.$EventBus.$on(\"nodeChange\", (isNodeChange) => {\n      this.isNodeChange = isNodeChange;\n    });\n\n    this.$EventBus.$on(\"changeLayout\", (layoutData) => {\n      this.config.layout = layoutData.layout;\n      this.config.layoutSettings = layoutData.layoutSettings;\n\n      this.blitzboard.setGraph(this.graph, true);\n      this.blitzboard.setConfig(this.config);\n\n      this.registerClickEventonGraph();\n    });\n\n    this.$EventBus.$on(\"clearGraph\", () => {\n      this.blitzboard.setGraph(\"\");\n      // by iron -- breadcrumb 데이터 reset 시작\n      this.clearBreadcrumb();\n      // by iron -- breadcrumb 데이터 reset 끝\n\n      this.registerClickEvent = false;\n    });\n\n    this.$EventBus.$on(\"initGraph\", (config) => {\n      this.container = document.getElementById(\"blitzboard\");\n      this.blitzboard = new Blitzboard(this.container); // no-undef\n      this.config = config;\n\n      // pg를 통해서 그래프 생성\n      this.blitzboard.setGraph(\"\", false);\n      this.blitzboard.setConfig(this.config);\n\n      //by iron\n      this.clearBreadcrumb();\n\n      this.registerClickEventonGraph();\n    });\n\n    this.$EventBus.$on(\"querySubmit\", (formData) => {\n      this.registerClickEvent = false;\n      this.formData = formData;\n      let query = \"\";\n\n      // by iron -- breadcrumb 데이터 reset 시작\n      this.navItems = [{ text: \"시작\", disabled: true, href: \"\" }];\n      // by iron -- breadcrumb 데이터 reset 끝\n\n      // Graph만\n      // by iron -- query 수정  ( 2022.6.6 18:33)\n      let edgePropQuery = \"n2\";\n\n      if (this.formData.edgeProp.length > 0) {\n        edgePropQuery += \":\";\n\n        for (const edgeProperty of this.formData.edgeProp) {\n          edgePropQuery += '\"' + edgeProperty + '\"|';\n        }\n\n        edgePropQuery = edgePropQuery.slice(0, -1);\n      }\n\n      console.log(edgePropQuery);\n\n      if (this.formData.searchTerm === \"\") {\n        query += \"SELECT * FROM MATCH (n1)-[e]-(\" + edgePropQuery + \") \";\n        query += \"ON \" + this.formData.graph + \" \";\n      } else {\n        query += \"SELECT * FROM MATCH (n1)-[e]-(\" + edgePropQuery + \") \";\n        query += \"ON \" + this.formData.graph + \" \";\n        console.log(query);\n        // by iron  --  그래프에 따른 parameter 변경 추가\n        let param = \"v_name\";\n        if (this.formData.graph === \"G_NH_EVENT\") {\n          param = \"EVENT_NAME\";\n        } else if (this.formData.graph === \"G_NH_COMPANY\") {\n          param = \"CORP_NAME\";\n        } else if (this.formData.graph === \"G_NH_AGENT\") {\n          param = \"AGENT_NAME\";\n        }\n        query +=\n          \"WHERE JAVA_REGEXP_LIKE(n1.\" +\n          param +\n          \", '\" +\n          this.formData.searchTerm +\n          \"') \";\n      }\n      if (this.formData.limit !== \"\") {\n        query += \"LIMIT \" + this.formData.limit;\n      }\n      console.log(query);\n\n      this.$axios({\n        method: \"get\",\n        url:\n          \"/ui/v1/query?pgql=\" +\n          encodeURI(query) +\n          \"&size=\" +\n          this.formData.size, // + \"&graph=\" + this.formData.graph,  -- by iron\n        headers: { \"Content-type\": \"application/json\" },\n        withCredentials: true,\n        cossDomain: true,\n      }).then((response) => {\n        var nodes = [];\n        var edges = [];\n        let result = response.data;\n\n        result.graph.vertices.forEach((elem) => {\n          let node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {},\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          nodes.push(node);\n        });\n\n        result.graph.edges.forEach((elem) => {\n          let edge = {\n            id: elem._id,\n            from: elem.s,\n            to: elem.d,\n            labels: elem.l,\n            properties: {},\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              edge.properties[elem_p.n] = [elem_p.v];\n              if (this.formData.boldEdgeByAmount === true) {\n                if (edge.properties[\"RELATIONSHIP_AMOUNT\"] !== undefined) {\n                  if (edge.properties[\"RELATIONSHIP_AMOUNT\"][0] > 0) {\n                    edge.properties[\"weight\"] = \"5\";\n                  }\n                  console.log(edge.properties[\"RELATIONSHIP_AMOUNT\"][0]);\n                }\n              }\n            }\n          });\n\n          edges.push(edge);\n        });\n\n        this.graphData = { nodes: nodes, edges: edges };\n        console.log(this.graphData);\n        this.blitzboard.setGraph(this.graphData, true);\n        this.blitzboard.setConfig(this.config);\n\n        var navText = this.formData.searchTerm;\n        if (navText === \"\") {\n          navText = \"*\";\n        }\n        this.navItems.push({\n          text: navText,\n          disabled: false,\n          href: \"\",\n        });\n        // by iron -- breadcrumb 데이터 푸쉬 끝\n        this.registerClickEventonGraph();\n      });\n    });\n\n    this.$EventBus.$on(\"updateGraph\", (config) => {\n      this.container = document.getElementById(\"blitzboard\");\n      this.config = config;\n\n      // pg를 통해서 그래프 생성\n      this.blitzboard.setGraph(this.graph, false);\n      this.blitzboard.setConfig(this.config);\n\n      this.registerClickEventonGraph();\n    });\n  },\n  mounted() {},\n  methods: {\n    registerClickEventonGraph() {\n      if (this.registerClickEvent === false) {\n        // 더블클릭 시 해당 노드를 기준으로 쿼리\n        this.blitzboard.network.on(\"doubleClick\", (e) => {\n          if (e.nodes.length > 0) {\n            let node = this.blitzboard.nodeMap[e.nodes[0]];\n            this.queryByNodeId(node);\n\n            this.registerClickEvent = true;\n          }\n        });\n\n        // 클릭 시 속성값 가져오기\n        this.blitzboard.network.on(\"click\", (e) => {\n          if (e.nodes.length > 0) {\n            let node = this.blitzboard.nodeMap[e.nodes[0]];\n            this.$EventBus.$emit(\"nodeClicked\", node);\n\n            this.blitzboard.scrollNodeIntoView(node);\n\n            // 우측 검색창 관련\n            let proxy = this.blitzboard.getNode(nodeId);\n            let searchKeyword = \"\";\n\n            if(proxy.properties['V_NAME'] != undefined) {\n              searchKeyword = proxy.properties['V_NAME'][0];\n            } else if(proxy.properties['AGENT_NAME'] != undefined) {\n              searchKeyword = proxy.properties['AGENT_NAME'][0];\n            } else if(proxy.properties['CORP_NAME'] != undefined) {\n              searchKeyword = proxy.properties['CORP_NAME'][0];\n            } else if(proxy.properties['EVENT_NAME'] != undefined) {\n              searchKeyword = proxy.properties['EVENT_NAME'][0];\n            }\n\n            console.log(searchKeyword);\n\n            this.curationDrawer = true;\n          }\n\n          // if (e.edges.length > 0) {\n          //   let edge = this.blitzboard.edgeMap[e.edges[0]];\n          //   //console.log(edge);\n          // }\n        });\n \n        // this.blitzboard.network.on(\"oncontext\", (e) => {\n        //   console.log(e);\n        //   e.event.preventDefault();\n        //   let nodeId = this.blitzboard.network.getNodeAt(e.pointer.DOM);\n        //   let proxy = this.blitzboard.getNode(nodeId);\n        //   //\"V_NAME\", \"AGENT_NAME\", \"CORP_NAME\", \"EVENT_NAME\"\n        //   let searchKeyword = \"\";\n\n        //   if(proxy.properties['V_NAME'] != undefined) {\n        //     searchKeyword = proxy.properties['V_NAME'][0];\n        //   } else if(proxy.properties['AGENT_NAME'] != undefined) {\n        //     searchKeyword = proxy.properties['AGENT_NAME'][0];\n        //   } else if(proxy.properties['CORP_NAME'] != undefined) {\n        //     searchKeyword = proxy.properties['CORP_NAME'][0];\n        //   } else if(proxy.properties['EVENT_NAME'] != undefined) {\n        //     searchKeyword = proxy.properties['EVENT_NAME'][0];\n        //   }\n\n        //   console.log(searchKeyword);\n\n        //   this.curationDrawer = true;\n\n        // });\n      }\n    },\n    queryByNodeId(node) {\n      let graph = this.graphItems.filter((it) =>\n        it.text.includes(node.labels[0])\n      );\n\n      let query = \"\";\n      let edgePropQuery = \"n2\";\n\n      if (this.formData.edgeProp.length > 0) {\n        edgePropQuery += \":\";\n\n        for (const edgeProperty of this.formData.edgeProp) {\n          edgePropQuery += '\"' + edgeProperty + '\"|';\n        }\n\n        edgePropQuery = edgePropQuery.slice(0, -1);\n      }\n\n      console.log(edgePropQuery);\n\n      query += \"SELECT * FROM MATCH (n1)-[e]-(\" + edgePropQuery + \") \";\n      query += \"ON \" + graph[0].value + \" \";\n      query += \"WHERE ID(n1) = '\" + node.id + \"' \";\n\n      if (this.formData.limit !== \"\") {\n        query += \"LIMIT \" + this.formData.limit;\n      }\n      this.blitzboard.showLoader();\n\n      this.$axios({\n        method: \"get\",\n        url:\n          \"/ui/v1/query?pgql=\" +\n          encodeURI(query) +\n          \"&size=\" +\n          this.formData.size,\n        headers: { \"Content-type\": \"application/json\" },\n        withCredentials: true,\n        cossDomain: true,\n      }).then((response) => {\n        var nodes = [];\n        var edges = [];\n\n        let result = response.data;\n        // Nodes\n        result.graph.vertices.forEach((elem) => {\n          let node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {},\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          console.log(node);\n          // ReDraw\n          if (this.isNodeChange) {\n            nodes.push(node);\n          } else {\n            // Add\n            this.blitzboard.addNode(node, false);\n          }\n        });\n\n        // Edges\n        result.graph.edges.forEach((elem) => {\n          // 여러번 클릭한 경우 동일한 엣지가 계속 생성되는 걸 방지...\n          if (!this.blitzboard.hasEdge(elem.s, elem.d)) {\n            let edge = {\n              id: elem._id,\n              from: elem.s,\n              to: elem.d,\n              labels: elem.l,\n              properties: {},\n            };\n            elem.p.forEach((elem_p) => {\n              console.log(elem_p.n);\n              if (elem_p.v) {\n                edge.properties[elem_p.n] = [elem_p.v];\n                edge.properties[\"weight\"] = \"1.3\";\n                edge.properties[\"color\"] = \"red\";\n              }\n            });\n\n            // ReDraw\n            if (this.isNodeChange) {\n              edges.push(edge);\n            } else {\n              // Add\n              this.blitzboard.addEdge(edge, false);\n            }\n          }\n        });\n        // Update\n        if (this.isNodeChange) {\n          this.graphData = { nodes: nodes, edges: edges };\n          this.blitzboard.setGraph(this.graphData, true);\n          this.blitzboard.setConfig(this.config);\n          this.registerClickEvent = false;\n        } else {\n          this.blitzboard.update();\n        }\n        this.registerClickEventonGraph();\n\n        // by iron - insert breadcrumb\n        this.insertBreadcrumb(node);\n\n        setTimeout(() => this.blitzboard.scrollNodeIntoView(node), 1500);\n\n        this.blitzboard.hideLoader();\n      });\n    },\n\n    // by iron\n    // redraw() query 를 받아서 그래프 구성\n    // 기존 JSON 구조에서 Query 던지는 것으로 바꿈\n    redraw() {\n      //this.graph = this.inputpg;\n      let query = this.inputpg;\n\n      this.$axios({\n        method: \"get\",\n        url: \"/ui/v1/query?pgql=\" + encodeURI(query) + \"&size=10000\", // + \"&graph=\" + this.formData.graph,\n        headers: { \"Content-type\": \"application/json\" },\n        withCredentials: true,\n        cossDomain: true,\n      }).then((response) => {\n        var nodes = [];\n        var edges = [];\n        let result = response.data;\n\n        result.graph.vertices.forEach((elem) => {\n          let node = {\n            id: elem._id,\n            labels: elem.l,\n            properties: {},\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              node.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n          nodes.push(node);\n        });\n\n        result.graph.edges.forEach((elem) => {\n          let edge = {\n            id: elem._id,\n            from: elem.s,\n            to: elem.d,\n            labels: elem.l,\n            properties: {},\n          };\n          elem.p.forEach((elem_p) => {\n            if (elem_p.v) {\n              edge.properties[elem_p.n] = [elem_p.v];\n            }\n          });\n\n          edges.push(edge);\n        });\n\n        this.graphData = { nodes: nodes, edges: edges };\n        console.log(this.graphData);\n        this.blitzboard.setGraph(\"\");\n        this.blitzboard.setGraph(this.graphData, true);\n        this.blitzboard.setConfig(this.config);\n        this.registerClickEventonGraph();\n        //by iron\n        this.clearBreadcrumb();\n\n        this.dialog = !this.dialog;\n      });\n    },\n    reConfig() {\n      this.config = {\n        node: {\n          caption: [\"id\"],\n          defaultIcon: false,\n          icon: {\n            person: \"akar-icons:person\",\n            Property: \"f38f\",\n            Tax: \"f119\",\n            Account: \"f119\",\n            Income: \"f316\",\n          },\n          shape: {\n            person: \"triangle\",\n            graph: \"square\",\n          },\n          size: {\n            person: 10,\n          },\n        },\n        edge: {\n          caption: [\"label\"],\n          color: {\n            say1: \"green\",\n          },\n        },\n      };\n\n      // pg를 통해서 그래프 생성\n      this.blitzboard.setGraph(this.graph, false);\n      this.blitzboard.setConfig(this.config);\n    },\n    // by iron -- breadcrumb 데이터 clear\n    clearBreadcrumb() {\n      this.navItems = [{ text: \"시작\", disabled: true, href: \"\" }];\n    },\n    // by iron - breadcrumbs 아이템 추가\n    insertBreadcrumb(node) {\n      var navText = \"\";\n      switch (node.labels[0]) {\n        case \"기관\":\n          navText = node.properties.AGENT_NAME[0];\n          break;\n        case \"이벤트\":\n          navText = node.properties.EVENT_NAME[0];\n          break;\n        case \"회사\":\n          navText = node.properties.CORP_NAME[0];\n          break;\n        default:\n          navText = node.properties.V_NAME[0];\n          break;\n      }\n      // console.log(\"navTExt:\" + navText);\n      // let last = this.navItems[this.navItems.length - 1];\n      // console.log(\"last:\" + last.text);\n      // if (last.text !== navText) {\n      //   this.navItems.push({\n      //     text: navText,\n      //     disabled: true,\n      //     href: \"\",\n      //   });\n      // }\n      this.navItems.push({\n        text: navText,\n        disabled: true,\n        href: \"\",\n      });\n    },\n  },\n};\n</script>\n"]},"metadata":{},"sourceType":"module"}